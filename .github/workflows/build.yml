# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: build

on:
  push:

env:
  DOCKER_REPO: dfedigital/register-trainee-teacher-data
  DOCKER_IMAGE: register-trainee-teacher-data

jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      sha_tag: ${{ steps.set_env.outputs.SHA_TAG }}

    env:
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_HOSTNAME: localhost

    steps:
    - uses: actions/checkout@v2
    - name: Get values for current commit
      id: set_env
      run: |
        GIT_SHA_SHORT=$(echo ${GITHUB_SHA} | cut -c 1-7)
        GIT_BRANCH="${GITHUB_REF##*/}"
        echo "GIT_SHA_SHORT=$GIT_SHA_SHORT" >> $GITHUB_ENV
        echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
        echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
        echo "SHA_TAG=$GIT_SHA_SHORT" >> $GITHUB_ENV
        echo "::set-output name=SHA_TAG::$GIT_SHA_SHORT"


    - name: Login to docker hub
      run: echo "${{secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN}}" | docker login -u ${{secrets.DOCKERHUB_USERNAME}} --password-stdin

    - name: "docker pull ${{env.DOCKER_REPO}}:${{env.BRANCH_TAG}}"
      run: docker pull $DOCKER_REPO:$BRANCH_TAG || true

    - name: "docker-compose build"
      run:  docker-compose build

    - name: Bring images up
      run: |
        docker-compose up --no-build -d
        docker-compose exec -T web /bin/sh -c "./wait-for-command.sh -c 'nc -z db 5432' -s 0 -t 20"

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v1

    - name: Setup DB
      run: docker-compose exec -T web /bin/sh -c "bundle exec rails db:setup"

    - name: Run Ruby Linter
      run: docker-compose exec -T web /bin/sh -c 'bundle exec rubocop app config db lib spec Gemfile --format clang'

    - name: Run JavaScript Linter
      run: docker-compose exec -T web /bin/sh -c 'bundle exec rake lint:javascript'

    - name: Run SCSS Linter
      run:  docker-compose exec -T web /bin/sh -c 'bundle exec rake lint:scss'

    - name: Run tests
      run: |
        docker-compose exec --env COVERAGE=true -T web /bin/sh -c "bundle exec rake spec SPEC_OPTS='--format RspecSonarqubeFormatter --out rspec-test-report.xml --format documentation'"
        # Copy test results and coverage to docker host (used by another script)
        docker cp -a register-trainee-teachers_web_1:/app/coverage .
        docker cp -a register-trainee-teachers_web_1:/app/rspec-test-report.xml .
        # As the tests were run in the docker container the paths to the coverage are prefixed with "/app/"
        # So we need to replace it with the docker hosts current directory
        sed "s|\"/app/|\"`pwd`/|g" coverage/backend/.resultset.json -i
        ls -d $PWD/

    - name: Keep Code Coverage Report
      uses: actions/upload-artifact@v2
      with:
        name: Code_Coverage
        if-no-files-found: error
        path: |
          ${{ github.workspace }}/coverage/*
          ${{ github.workspace }}/rspec-test-report.xml

    - name: Run sonarqube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run:
        ls -d $PWD/
        sonar-scanner
          -Dsonar.login=6ca2ab400673d5491d6746aa6337d743e94a9dbf
          -Dsonar.testExecutionReportPaths=${{ github.workspace }}/rspec-test-report.xml
          -Dsonar.ruby.coverage.reportPaths=${{ github.workspace }}/coverage/backend/.resultset.json

    - name: Tag docker images
      run: docker tag ${{env.DOCKER_REPO}}:${{env.BRANCH_TAG}} ${{env.DOCKER_REPO}}:${{env.SHA_TAG}}

    - name: Push docker images to Docker Hub
      run: |
        docker push ${{env.DOCKER_REPO}}:${{env.BRANCH_TAG}}
        docker push ${{env.DOCKER_REPO}}:${{env.SHA_TAG}}

  #master
  deploy_to_paas_QA:

    name: Deploy to Paas
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build
    env:
      SHA_TAG: ${{needs.build.outputs.sha_tag}}

    steps:
    - uses: actions/checkout@v2
    - name: Pin Terraform version
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.29

    - name: Install Terraform CloudFoundry Provider
      run: |
          mkdir -p $HOME/.terraform.d/plugins/linux_amd64
          cd $HOME/.terraform.d/plugins/linux_amd64
          wget -q -O zipfile https://github.com/cloudfoundry-community/terraform-provider-cloudfoundry/releases/download/v0.12.4/terraform-provider-cloudfoundry_0.12.4_linux_amd64.zip && unzip zipfile && rm zipfile

    - name: Terraform init
      run: terraform init -backend-config=terraform/workspace-variables/qa_backend.tfvars terraform
      env:
        TF_VAR_paas_app_docker_image: ${{env.DOCKER_REPO}}:${{env.SHA_TAG}}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

    - name: Terraform Plan and Apply
      run: |
        terraform plan -var-file=terraform/workspace-variables/qa.tfvars terraform
        terraform apply -var-file=terraform/workspace-variables/qa.tfvars -auto-approve terraform
      env:
        TF_VAR_paas_app_docker_image: ${{env.DOCKER_REPO}}:${{env.SHA_TAG}}
        ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
        TF_VAR_paas_password: ${{ secrets.TF_VAR_PAAS_PASSWORD }}
        TF_VAR_paas_user: ${{ secrets.TF_VAR_PAAS_USER }}
        TF_VAR_paas_log_url: ${{ secrets.TF_VAR_PAAS_LOGGING_ENDPOINT_PORT }}
        TF_VAR_paas_settings__basic_auth__password: ${{ secrets.TF_VAR_PAAS_SETTINGS__BASIC_AUTH__PASSWORD }}
        TF_VAR_paas_settings__dttp__client_secret:  ${{ secrets.TF_VAR_PAAS_SETTINGS__DTTP__CLIENT_SECRET }}
        TF_VAR_paas_settings__basic_auth__username :  ${{ secrets.TF_VAR_PAAS_SETTINGS__BASIC_AUTH__USERNAME }}
        TF_VAR_paas_settings__dttp__client_id :  ${{ secrets.TF_VAR_PAAS_SETTINGS__DTTP__CLIENT_ID }}
        TF_VAR_paas_settings__dttp__tenant_id :  ${{ secrets.TF_VAR_PAAS_SETTINGS__DTTP__TENANT_ID }}
        TF_VAR_paas_settings__dttp__api_base_url :  ${{ secrets.TF_VAR_PAAS_SETTINGS__DTTP__API_BASE_URL }}

